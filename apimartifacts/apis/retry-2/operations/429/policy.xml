<!--
    - Policies are applied in the order they appear.
    - Position <base/> inside a section to inherit policies from the outer scope.
    - Comments within policies are not preserved.
-->
<!-- Add policies as children to the <inbound>, <outbound>, <backend>, and <on-error> elements -->
<policies>
	<!-- Throttle, authorize, validate, cache, or transform the requests -->
	<inbound>
		<base />
		<set-variable name="originalBody" value="@(context.Request.Body.As<string>())" />
		<!-- acquire token for AOAI using APIM's managed identity -->
		<authentication-managed-identity resource="https://cognitiveservices.azure.com/" output-token-variable-name="bearer" />
		<set-header name="Authorization" exists-action="override">
			<value>@("Bearer " + context.Variables.GetValueOrDefault<string>("bearer"))</value>
		</set-header>
	</inbound>
	<!-- Control if and how the requests are forwarded to services  -->
	<backend>
		<base />
	</backend>
	<!-- Customize the responses -->
	<outbound>
		<base />
		<choose>
			<when condition="@(context.Response.StatusCode == 429)">
				<send-request mode="new" response-variable-name="resp" timeout="20" ignore-error="true">
					<!-- replace URL with secondary AOAI endpoint -->
					<set-url>https://httpbin.org/status/200</set-url>
					<set-method>POST</set-method>
					<!-- Set the auth header using the bearer token acquired from the authentication-managed-identity policy -->
					<set-header name="Authorization" exists-action="override">
						<value>@("Bearer " + context.Variables.GetValueOrDefault<string>("bearer"))</value>
					</set-header>
					<!-- Repeat this set-header pattern for each header that needs to be copied from the original client request to the secondary endpoint request -->
					<set-header name="your-header-name" exists-action="override">
						<value>@{
                          string value;
                          string[] values; // Headers are an array of values even though they usually just contain one value
                          var headerExists = context.Request.Headers.TryGetValue("User-Agent", out values);
                          
                          return headerExists? values[0] : string.Empty;
                        }</value>
					</set-header>
					<set-body>@(context.Variables.GetValueOrDefault<string>("originalBody"))</set-body>
					<!--
                    <set-body>@(context.Request.Body.As<string>())</set-body>
                    -->
				</send-request>
				<return-response>
					<set-status code="@(((IResponse)context.Variables["resp"]).StatusCode)" />
					<set-header name="headerName" exists-action="override">
						<value>@{
                          string value;
                          string[] values;
                          var headerExists = ((IResponse)context.Variables["resp"]).Headers.TryGetValue("Content-Type", out values);

                          return headerExists ? values[0] : string.Empty;
                        }</value>
					</set-header>
					<set-body>@(((IResponse)context.Variables["resp"]).Body.As<string>())</set-body>
				</return-response>
			</when>
			<otherwise />
		</choose>
	</outbound>
	<!-- Handle exceptions and customize error responses  -->
	<on-error>
		<base />
	</on-error>
</policies>